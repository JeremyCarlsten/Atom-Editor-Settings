(function() {
  var Range, Ripper, assertPoint, assertRange, expectEqualRefs, expectNoRefs,
    __slice = [].slice;

  Ripper = require('../lib/coffee_refactor').Ripper;

  Range = require('atom').Range;

  expectNoRefs = function(ripper, range) {
    var resultRanges;
    resultRanges = ripper.find(range);
    return expect(resultRanges).toHaveLength(0);
  };

  expectEqualRefs = function() {
    var i, newRanges, range, ranges, ripper, _i, _len, _results;
    ripper = arguments[0], ranges = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _results = [];
    for (i = _i = 0, _len = ranges.length; _i < _len; i = ++_i) {
      range = ranges[i];
      newRanges = ranges.slice();
      newRanges.splice(i, 1);
      newRanges.unshift(range);
      _results.push(assertRange(ripper, newRanges));
    }
    return _results;
  };

  assertRange = function(ripper, ranges) {
    assertPoint(ripper, ranges[0].start, ranges);
    return assertPoint(ripper, ranges[0].end, ranges);
  };

  assertPoint = function(ripper, point, ranges) {
    var i, resultRange, resultRanges, _i, _len, _results;
    resultRanges = ripper.find(point);
    ranges.sort(function(a, b) {
      var delta;
      if ((delta = a.start.row - b.start.row) !== 0) {
        return delta;
      }
      return a.start.column - b.start.column;
    });
    expect(resultRanges).toHaveLength(ranges.length);
    _results = [];
    for (i = _i = 0, _len = resultRanges.length; _i < _len; i = ++_i) {
      resultRange = resultRanges[i];
      _results.push(expect(resultRange).toEqual(ranges[i]));
    }
    return _results;
  };

  describe('Ripper', function() {
    describe('parse', function() {
      var ripper;
      ripper = new Ripper;
      return it('should not throw error if code is invalid', function() {
        expect(function() {
          return ripper.parse("a /// b");
        }).not.toThrow();
        expect(function() {
          return ripper.find(new Range([0, 0], [0, 1]));
        }).not.toThrow();
        return expectNoRefs(ripper, new Range([0, 0], [0, 1]));
      });
    });
    return describe('find', function() {
      var ripper;
      ripper = new Ripper;
      it('should find no reference of whitespace or operator', function() {
        ripper.parse("b = a * b / 10");
        expectNoRefs(ripper, new Range([0, 1], [0, 2]));
        expectNoRefs(ripper, new Range([0, 2], [0, 3]));
        return expectNoRefs(ripper, new Range([1, 6], [1, 7]));
      });
      it('should find no referecene of `String` literal', function() {
        ripper.parse("'foo'\n\"bar\"\n'''baz'''");
        expectNoRefs(ripper, new Range([0, 0], [0, 1]));
        expectNoRefs(ripper, new Range([0, 1], [0, 2]));
        expectNoRefs(ripper, new Range([1, 0], [1, 1]));
        expectNoRefs(ripper, new Range([1, 1], [1, 2]));
        expectNoRefs(ripper, new Range([2, 0], [2, 1]));
        return expectNoRefs(ripper, new Range([2, 3], [2, 4]));
      });
      it('should find no referecene of `Number` literal', function() {
        ripper.parse("100\n0xff");
        expectNoRefs(ripper, new Range([0, 0], [0, 1]));
        expectNoRefs(ripper, new Range([0, 2], [0, 3]));
        expectNoRefs(ripper, new Range([1, 0], [1, 1]));
        return expectNoRefs(ripper, new Range([1, 3], [1, 4]));
      });
      it('should find no referecene of `Regex` literal', function() {
        ripper.parse("/foo\s+bar/\n///\nfoo\n\s+\nbar\n///");
        expectNoRefs(ripper, new Range([0, 0], [0, 1]));
        expectNoRefs(ripper, new Range([0, 5], [0, 6]));
        expectNoRefs(ripper, new Range([1, 0], [1, 1]));
        return expectNoRefs(ripper, new Range([3, 1], [3, 2]));
      });
      it('should support `Object` literal', function() {
        ripper.parse("x = 2\npoint =\n  x:\n    x: x * x\npoint.x = 100");
        expectNoRefs(ripper, new Range([2, 2], [2, 3]));
        expectNoRefs(ripper, new Range([3, 4], [3, 5]));
        expectNoRefs(ripper, new Range([4, 6], [4, 7]));
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([3, 7], [3, 8]), new Range([3, 11], [3, 12]));
      });
      it('should support `Array` literal', function() {
        ripper.parse("a = 10\nb = 5\nc = [\n  a + b\n  a - b\n]");
        expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([3, 2], [3, 3]), new Range([4, 2], [4, 3]));
        return expectEqualRefs(ripper, new Range([3, 6], [3, 7]), new Range([1, 0], [1, 1]), new Range([4, 6], [4, 7]));
      });
      it('should support `extends` statement', function() {
        ripper.parse("class A\nclass B extends A\nclass C extends A");
        return expectEqualRefs(ripper, new Range([0, 6], [0, 7]), new Range([1, 16], [1, 17]), new Range([2, 16], [2, 17]));
      });
      it('should support `if` statement', function() {
        ripper.parse("if a\n  a = a / a");
        return expectEqualRefs(ripper, new Range([0, 3], [0, 4]), new Range([1, 2], [1, 3]), new Range([1, 6], [1, 7]), new Range([1, 10], [1, 11]));
      });
      it('should support `for-in` statement without index', function() {
        ripper.parse("for variable in variables\n  console.log variable");
        return expectEqualRefs(ripper, new Range([0, 4], [0, 12]), new Range([1, 14], [1, 22]));
      });
      it('should support `for-in` statement with index', function() {
        ripper.parse("for elem, i in arr\n  console.log i, elem");
        expectEqualRefs(ripper, new Range([0, 4], [0, 8]), new Range([1, 17], [1, 21]));
        return expectEqualRefs(ripper, new Range([0, 10], [0, 11]), new Range([1, 14], [1, 15]));
      });
      it('should support `for-in` statement with destructuring assignment', function() {
        ripper.parse("for { a } in arr\n  a = 100\nfor [ a ] in arr\n  a = 100");
        return expectEqualRefs(ripper, new Range([0, 6], [0, 7]), new Range([1, 2], [1, 3]), new Range([2, 6], [2, 7]), new Range([3, 2], [3, 3]));
      });
      it('should support `for-of` statement', function() {
        ripper.parse("for key, val of obj\n  console.log key, val");
        expectEqualRefs(ripper, new Range([0, 4], [0, 7]), new Range([1, 14], [1, 17]));
        return expectEqualRefs(ripper, new Range([0, 9], [0, 12]), new Range([1, 19], [1, 22]));
      });
      it('should support `for-of` statement with destructuring assignment', function() {
        ripper.parse("for i, { a } of obj\n  a = 100\nfor i, [ a ] of obj\n  a = 100");
        return expectEqualRefs(ripper, new Range([0, 9], [0, 10]), new Range([1, 2], [1, 3]), new Range([2, 9], [2, 10]), new Range([3, 2], [3, 3]));
      });
      it('should support destructuring assignment statement of `Array`', function() {
        ripper.parse("a = b = c = 1\n[ a, [ b, c ] ] = obj\nfunc = ([ a, [ b, c ] ]) ->\n  a = b = c = 2");
        expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 2], [1, 3]));
        expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([1, 7], [1, 8]));
        expectEqualRefs(ripper, new Range([0, 8], [0, 9]), new Range([1, 10], [1, 11]));
        expectEqualRefs(ripper, new Range([2, 10], [2, 11]), new Range([3, 2], [3, 3]));
        expectEqualRefs(ripper, new Range([2, 15], [2, 16]), new Range([3, 6], [3, 7]));
        return expectEqualRefs(ripper, new Range([2, 18], [2, 19]), new Range([3, 10], [3, 11]));
      });
      it('should support destructuring assignment statement of `Object`', function() {
        ripper.parse("a = b = c = d = 1\n{ a: { b: c }, d } = obj\nfunc = ({ a: { b: c } }) ->\n  a = b = c = 2");
        expectNoRefs(ripper, new Range([1, 2], [1, 3]));
        expectNoRefs(ripper, new Range([1, 7], [1, 8]));
        expectNoRefs(ripper, new Range([2, 10], [2, 11]));
        expectNoRefs(ripper, new Range([2, 15], [2, 16]));
        expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([3, 2], [3, 3]));
        expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([3, 6], [3, 7]));
        expectEqualRefs(ripper, new Range([0, 8], [0, 9]), new Range([1, 10], [1, 11]));
        expectEqualRefs(ripper, new Range([0, 12], [0, 13]), new Range([1, 15], [1, 16]));
        return expectEqualRefs(ripper, new Range([2, 18], [2, 19]), new Range([3, 10], [3, 11]));
      });
      it('shoud work in construction of `Array`', function() {
        ripper.parse("a = 1\n[ a ]");
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 2], [1, 3]));
      });
      it('shoud work in construction of `Object`', function() {
        ripper.parse("a = 1\n{ a }");
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 2], [1, 3]));
      });
      it('should recognize the scope of variable', function() {
        ripper.parse("a = b = 100\ncalc = (a) ->\n  a * b\na /= b");
        expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([3, 0], [3, 1]));
        expectEqualRefs(ripper, new Range([1, 8], [1, 9]), new Range([2, 2], [2, 3]));
        return expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([2, 6], [2, 7]), new Range([3, 5], [3, 6]));
      });
      it('should recognize nested scope with param', function() {
        ripper.parse("a.forEach (a) ->\n  a.forEach (a) ->\n    a * a");
        expectEqualRefs(ripper, new Range([0, 0], [0, 1]));
        expectEqualRefs(ripper, new Range([1, 2], [1, 3]), new Range([0, 11], [0, 12]));
        return expectEqualRefs(ripper, new Range([1, 13], [1, 14]), new Range([2, 4], [2, 5]), new Range([2, 8], [2, 9]));
      });
      it('should recognize nested scope with variable', function() {
        ripper.parse("func0 = ->\n  a = 100\n  func1 = ->\n    a = 200\n  func2 = ->\n    a = 300");
        return expectEqualRefs(ripper, new Range([1, 2], [1, 3]), new Range([3, 4], [3, 5]), new Range([5, 4], [5, 5]));
      });
      it('should recognize declared variable in independent scopes', function() {
        ripper.parse("func0 = ->\n  a = 100\nfunc1 = ->\n  a = 100");
        expectEqualRefs(ripper, new Range([1, 2], [1, 3]));
        return expectEqualRefs(ripper, new Range([3, 2], [3, 3]));
      });
      it('should recognize scope of `Function` in `Array`', function() {
        ripper.parse("[\n  (a) ->\n    a 1\n  (a) ->\n    a 2\n]");
        expectEqualRefs(ripper, new Range([1, 3], [1, 4]), new Range([2, 4], [2, 5]));
        return expectEqualRefs(ripper, new Range([3, 3], [3, 4]), new Range([4, 4], [4, 5]));
      });
      it('should support double quoted string interpolation', function() {
        ripper.parse('a\n"#{a}"\n"x#{a}"\n"\n#{a}\n"\n"x\n#{a}\n"');
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 3], [1, 4]), new Range([2, 4], [2, 5]), new Range([4, 2], [4, 3]), new Range([7, 2], [7, 3]));
      });
      it('should support triple quoted string interpolation', function() {
        ripper.parse('a\n"""#{a}"""\n"""x#{a}"""\n"""\n#{a}\n"""\n"""x\n#{a}\n"""');
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 5], [1, 6]), new Range([2, 6], [2, 7]), new Range([4, 2], [4, 3]), new Range([7, 2], [7, 3]));
      });
      it('should support heregex interpolation', function() {
        ripper.parse('a\n///#{a}///\n///x#{a}///\n///\n#{a}\n///\n///x\n#{a}\n///');
        return expectEqualRefs(ripper, new Range([0, 0], [0, 1]), new Range([1, 5], [1, 6]), new Range([2, 6], [2, 7]), new Range([4, 2], [4, 3]), new Range([7, 2], [7, 3]));
      });
      it('should support symbol starting with $', function() {
        ripper.parse('$a = $ \'<p>foo</p>\'\n$a.text()');
        return expectEqualRefs(ripper, new Range([0, 0], [0, 2]), new Range([1, 0], [1, 2]));
      });
      it('should support symbol starting with _', function() {
        ripper.parse('_a = 1\n_a += 2');
        return expectEqualRefs(ripper, new Range([0, 0], [0, 2]), new Range([1, 0], [1, 2]));
      });
      return it('should explode interspersed JS', function() {
        ripper.parse('a = 10\n`\na = 20;\n`');
        return expectNoRefs(ripper, new Range([2, 0], [2, 1]));
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,

//# sourceURL=/home/jeremycarlsten/.atom/packages/coffee-refactor/spec/coffee-refactor-spec.coffee
