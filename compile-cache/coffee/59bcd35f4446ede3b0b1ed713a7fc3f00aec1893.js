(function() {
  var Range, Ripper, expectEqualRefs, expectNoRefs, inspect,
    __slice = [].slice;

  Ripper = require('../lib/js_refactor').Ripper;

  Range = require('atom').Range;

  inspect = require('util').inspect;

  expectNoRefs = function(ripper, range) {
    var resultRanges;
    resultRanges = ripper.find(range);
    return expect(resultRanges).toHaveLength(0);
  };

  expectEqualRefs = function() {
    var i, ranges, resultRange, resultRanges, ripper, _i, _len, _results;
    ripper = arguments[0], ranges = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    resultRanges = ripper.find(ranges[0].start);
    ranges.sort(function(a, b) {
      var delta;
      if ((delta = a.start.row - b.start.row) !== 0) {
        return delta;
      }
      return a.start.column - b.start.column;
    });
    expect(resultRanges).toHaveLength(ranges.length);
    _results = [];
    for (i = _i = 0, _len = resultRanges.length; _i < _len; i = ++_i) {
      resultRange = resultRanges[i];
      _results.push(expect(resultRange).toEqual(ranges[i]));
    }
    return _results;
  };

  describe('Ripper', function() {
    var ripper;
    ripper = new Ripper;
    it('should find refs in LF', function() {
      ripper.parse("var a;\na = 100;");
      expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([1, 0], [1, 1]));
      return expectEqualRefs(ripper, new Range([1, 0], [1, 1]), new Range([0, 4], [0, 5]));
    });
    it('should find refs in CR', function() {
      ripper.parse("var a;\ra = 100;");
      expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([1, 0], [1, 1]));
      return expectEqualRefs(ripper, new Range([1, 0], [1, 1]), new Range([0, 4], [0, 5]));
    });
    it('should find refs in CRLF', function() {
      ripper.parse("var a;\r\na = 100;");
      expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([1, 0], [1, 1]));
      return expectEqualRefs(ripper, new Range([1, 0], [1, 1]), new Range([0, 4], [0, 5]));
    });
    return it('should find refs in LFCR', function() {
      ripper.parse("var a;\r\na = 100;");
      expectEqualRefs(ripper, new Range([0, 4], [0, 5]), new Range([1, 0], [1, 1]));
      return expectEqualRefs(ripper, new Range([1, 0], [1, 1]), new Range([0, 4], [0, 5]));
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL2hvbWUvamVyZW15Y2FybHN0ZW4vLmF0b20vcGFja2FnZXMvanMtcmVmYWN0b3Ivc3BlYy9yaXBwZXItc3BlYy5jb2ZmZWUiCiAgXSwKICAibmFtZXMiOiBbXSwKICAibWFwcGluZ3MiOiAiQUFBQTtBQUFBLE1BQUEscURBQUE7SUFBQSxrQkFBQTs7QUFBQSxFQUFFLFNBQVcsT0FBQSxDQUFRLG9CQUFSLEVBQVgsTUFBRixDQUFBOztBQUFBLEVBQ0UsUUFBVSxPQUFBLENBQVEsTUFBUixFQUFWLEtBREYsQ0FBQTs7QUFBQSxFQUVFLFVBQVksT0FBQSxDQUFRLE1BQVIsRUFBWixPQUZGLENBQUE7O0FBQUEsRUFJQSxZQUFBLEdBQWUsU0FBQyxNQUFELEVBQVMsS0FBVCxHQUFBO0FBQ2IsUUFBQSxZQUFBO0FBQUEsSUFBQSxZQUFBLEdBQWUsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFaLENBQWYsQ0FBQTtXQUNBLE1BQUEsQ0FBTyxZQUFQLENBQ0EsQ0FBQyxZQURELENBQ2MsQ0FEZCxFQUZhO0VBQUEsQ0FKZixDQUFBOztBQUFBLEVBU0EsZUFBQSxHQUFrQixTQUFBLEdBQUE7QUFFaEIsUUFBQSxnRUFBQTtBQUFBLElBRmlCLHVCQUFRLGdFQUV6QixDQUFBO0FBQUEsSUFBQSxZQUFBLEdBQWUsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFPLENBQUEsQ0FBQSxDQUFFLENBQUMsS0FBdEIsQ0FBZixDQUFBO0FBQUEsSUFFQSxNQUFNLENBQUMsSUFBUCxDQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUosR0FBQTtBQUNWLFVBQUEsS0FBQTtBQUFBLE1BQUEsSUFBZ0IsQ0FBQyxLQUFBLEdBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFSLEdBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUEvQixDQUFBLEtBQXlDLENBQXpEO0FBQUEsZUFBTyxLQUFQLENBQUE7T0FBQTthQUNBLENBQUMs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

//# sourceURL=/home/jeremycarlsten/.atom/packages/js-refactor/spec/ripper-spec.coffee
